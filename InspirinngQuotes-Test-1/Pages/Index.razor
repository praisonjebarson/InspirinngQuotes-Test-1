@page "/"
@using System.Net.Http.Json
@using MudBlazor
@inject Services.ItagsService TagsService
@using Models
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<input type="text" @bind="searchAuthor" @oninput="Search" placeholder="Search" style="margin-bottom: 10px; width: 30%; outline: none; font-size: 16px; padding-left: 10px; border: 2px solid lightgrey; border-radius: 25px;" />
<table class="table">
    <thead class="table-dark">
        <tr>
            <th>Id</th>
            <th>Author</th>
            <th>Tags</th>
            <th>Quotes</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var element in filteredQuotes)
        {
            <tr>
                <td>@element.Id</td>
                <td>@element.Author</td>
                <td>@element.Tag</td>
                <td>@element.Quote</td>
                <td>
                    <button @onclick="() => EditTag(element.Id)" class="btn btn-link">
                        <i class="material-icons">edit</i>
                    </button>
                    <button @onclick="() => ShowDeleteConfirmationDialog(element.Id)" class="btn btn-link">
                        <i class="material-icons">delete</i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    List<Tags> tag = new List<Tags>();
    string searchAuthor = "";

    protected override async Task OnInitializedAsync()
    {
        tag = await TagsService.GetAllTags();
    }

    private async Task EditTag(int id)
    {
        var selectRecord = tag.FirstOrDefault(i => i.Id == id);
        if (selectRecord != null)
        {
            NavigationManager.NavigateTo($"/AddQuouts/{selectRecord.Id}");
        }
    }

    private async Task ShowDeleteConfirmationDialog(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this record?");
        if (confirmed)
        {
            await DeleteTag(id);
        }
    }

    private async Task DeleteTag(int id)
    {
        await TagsService.DeleteTags(id);
        tag = await TagsService.GetAllTags();
    }
    private async Task Search(ChangeEventArgs e)
    {
        searchAuthor = e.Value.ToString();
        await InvokeAsync(() => StateHasChanged());
    }
    private List<Tags> filteredQuotes
    {
        get
        {
            if (string.IsNullOrEmpty(searchAuthor))
                return tag.OrderBy(q => q.Id).ToList();
            else
                return tag.Where(q => q.Author.ToLower().Contains(searchAuthor.ToLower()) ||
                    q.Tag.ToLower().Contains(searchAuthor.ToLower()) || q.Quote.ToLower().Contains(searchAuthor.ToLower()) || q.Id.ToString().Contains(searchAuthor))
                    .OrderBy(q => q.Id)
                    .ToList();
        }
    }
}
